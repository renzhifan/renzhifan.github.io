(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{532:function(s,t,a){"use strict";a.r(t);var n=a(33),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"go-支持的数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-支持的数据类型"}},[s._v("#")]),s._v(" Go 支持的数据类型")]),s._v(" "),a("p",[s._v("Go 语言内置对以下这些基本数据类型的支持：")]),s._v(" "),a("ul",[a("li",[s._v("布尔类型：bool")]),s._v(" "),a("li",[s._v("整型：int8、byte、int16、int、uint、uintptr 等")]),s._v(" "),a("li",[s._v("浮点类型：float32、float64")]),s._v(" "),a("li",[s._v("复数类型：complex64、complex128")]),s._v(" "),a("li",[s._v("字符串：string")]),s._v(" "),a("li",[s._v("字符类型：rune")]),s._v(" "),a("li",[s._v("错误类型：error")])]),s._v(" "),a("blockquote",[a("p",[s._v("此外，Go 语言还支持以下这些复合类型：")])]),s._v(" "),a("ul",[a("li",[s._v("指针（pointer）")]),s._v(" "),a("li",[s._v("数组（array）")]),s._v(" "),a("li",[s._v("切片（slice）")]),s._v(" "),a("li",[s._v("字典（map）")]),s._v(" "),a("li",[s._v("通道（chan）")]),s._v(" "),a("li",[s._v("结构体（struct）")]),s._v(" "),a("li",[s._v("接口（interface）")])]),s._v(" "),a("p",[s._v("与其他静态语言不同的是，Go 新增了一个通道类型，该类型主要用于并发编程时不同协程之间的通信，后面介绍 Go 语言并发编程的时候会详细介绍它。")]),s._v(" "),a("p",[s._v("结构体类似于面向对象编程语言中的类（class），Go 沿用了 C 语言的这一复合类型，而没有像传统面向对象编程那样引入单独的类概念，Go 语言还把接口单独作为一个类型提出来，后面介绍 Go 语言面向对象编程的时候会详细介绍这两个类型的使用。")]),s._v(" "),a("h2",{attrs:{id:"布尔类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型"}},[s._v("#")]),s._v(" 布尔类型")]),s._v(" "),a("p",[s._v("Go 语言中的布尔类型与其他主流编程语言差不多，类型关键字为 "),a("code",[s._v("bool")]),s._v("，可赋值且只可以赋值为预定义常量 "),a("code",[s._v("true")]),s._v(" 和 "),a("code",[s._v("false")]),s._v("。示例代码如下：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" v1 "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" \nv1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" \nv2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// v2 也会被推导为 bool 类型")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("Go 是强类型语言，变量类型一旦确定，就不能将其他类型的值赋值给该变量，因此，布尔类型不能接受其他类型的赋值，也不支持自动或强制的类型转换。以下的示例是一些错误的用法，会导致编译错误：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" \nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译错误 ")]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译错误")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("不过通过表达式计算得到的布尔类型结果可以赋值给 Go 布尔类型变量：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" \nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译正确 ")]),s._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Result:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印结果为Result: true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("此外，由于强类型的缘故，Go 语言在进行布尔值真假判断时，对值的类型有严格限制，在 PHP 这种弱类型语言中，以下这些值在进行布尔值判断的时候（使用非严格的 == 比较符）都会被认为是 false（JavaScript、Python 也类似）：")]),s._v(" "),a("ul",[a("li",[s._v("布尔值 FALSE 本身")]),s._v(" "),a("li",[s._v("整型值 0（零）")]),s._v(" "),a("li",[s._v("浮点型值 0.0（零）")]),s._v(" "),a("li",[s._v("空字符串，以及字符串 “0”")]),s._v(" "),a("li",[s._v("不包括任何元素的数组")]),s._v(" "),a("li",[s._v("特殊类型 NULL（包括尚未赋值的变量）")]),s._v(" "),a("li",[s._v("从空标记生成的 SimpleXML 对象")])]),s._v(" "),a("p",[s._v("而在 Go 语言中则不然，不同类型的值不能使用 "),a("code",[s._v("==")]),s._v(" 或 "),a("code",[s._v("!=")]),s._v(" 运算符进行比较，在编译期就会报错，比如下面这段代码：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在编译的时候就会报如下错误：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("cannot convert 0 (type untyped number) to type bool\ninvalid operation: false == 0 (mismatched types bool and int)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("同样，! 运算符也不能作用于非布尔类型值。")])])}),[],!1,null,null,null);t.default=e.exports}}]);