(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{534:function(a,s,t){"use strict";t.r(s);var e=t(33),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"浮点型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点型"}},[a._v("#")]),a._v(" 浮点型")]),a._v(" "),t("blockquote",[t("p",[a._v("浮点型也叫浮点数，用于表示包含小数点的数据，比如 3.14、1.00 都是浮点型数据。")])]),a._v(" "),t("h2",{attrs:{id:"浮点数的表示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点数的表示"}},[a._v("#")]),a._v(" 浮点数的表示")]),a._v(" "),t("p",[a._v("Go 语言中的浮点数采用"),t("a",{attrs:{href:"https://zh.wikipedia.org/zh-hans/IEEE_754",target:"_blank",rel:"noopener noreferrer"}},[a._v("IEEE-754"),t("OutboundLink")],1),a._v(" 标准的表达方式，定义了两个类型："),t("code",[a._v("float32")]),a._v(" 和 "),t("code",[a._v("float64")]),a._v("，其中 "),t("code",[a._v("float32")]),a._v(" 是单精度浮点数，可以精确到小数点后 7 位（类似 PHP、Java 等语言的 float 类型），"),t("code",[a._v("float64")]),a._v(" 是双精度浮点数，可以精确到小数点后 15 位（类似 PHP、Java 等语言的 "),t("code",[a._v("double")]),a._v(" 类型）。")]),a._v(" "),t("p",[a._v("在 Go 语言里，定义一个浮点型变量的代码如下：")]),a._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" floatValue1 "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("float32")]),a._v("\n\nfloatValue1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\nfloatValue2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果不加小数点，floatValue2 会被推导为整型而不是浮点型")]),a._v("\nfloatValue3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.1E-10")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("对于浮点类型需要被自动推导的变量，其类型将被自动设置为 "),t("strong",[a._v("float64")]),a._v("，而不管赋值给它的数字是否是用 32 位长度表示的。因此，对于以上的例子，下面的赋值将导致编译错误：")]),a._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[a._v("floatValue1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" floatValue2  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// floatValue2 是 float64 类型")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("编译错误信息如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("cannot use floatValue2 (type float64) as type float32 in assignment\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("必须使用这样的强制类型转换才可以：")]),a._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[a._v("floatValue1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("float32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("floatValue2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("在实际开发中，应该尽可能地使用 "),t("code",[a._v("float64")]),a._v(" 类型，因为 "),t("a",{attrs:{href:"https://pkg.go.dev/math",target:"_blank",rel:"noopener noreferrer"}},[a._v("math"),t("OutboundLink")],1),a._v(" 包中所有有关数学运算的函数都会要求接收这个类型。")]),a._v(" "),t("h2",{attrs:{id:"浮点数的精度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点数的精度"}},[a._v("#")]),a._v(" 浮点数的精度")]),a._v(" "),t("p",[a._v("浮点数不是一种精确的表达方式，因为二进制无法精确表示所有十进制小数，比如 0.1、0.7 这种，下面我们通过一个示例来给大家直观演示下：")]),a._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[a._v("floatValue4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.1")]),a._v("\nfloatValue5 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.7")]),a._v("\nfloatValue6 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" floatValue4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" floatValue5\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("blockquote",[t("p",[a._v("注：浮点数的运算和整型一样，也要保证操作数的类型一致，float32 和 float64 类型数据不能混合运算，需要手动进行强制转化才可以，这一点和动态语言不同。")])]),a._v(" "),t("p",[a._v("你觉得上面计算结果 "),t("code",[a._v("floatValue6")]),a._v(" 的值是多少？0.8？不，它的结果是"),t("code",[a._v("0.7999999999999999")]),a._v("，这是因为计算机底层将十进制的 0.1 和 0.7 转化为二进制表示时，会丢失精度，所以永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。")]),a._v(" "),t("h2",{attrs:{id:"浮点数的比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点数的比较"}},[a._v("#")]),a._v(" 浮点数的比较")]),a._v(" "),t("p",[a._v("浮点数支持通过"),t("strong",[a._v("算术运算符")]),a._v("进行四则运算，也支持通过"),t("strong",[a._v("比较运算符")]),a._v("进行比较（前提是运算符两边的操作数类型一致），但是涉及到相等的比较除外，因为我们上面提到，看起来相等的两个十进制浮点数，在底层转化为二进制时会丢失精度，因此不能被表象蒙蔽。")]),a._v(" "),t("p",[a._v("如果一定要判断相等，下面是一种替代的解决方案：")]),a._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[a._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00001")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 判断 floatValue1 与 floatValue2 是否相等")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Dim")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("float64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("floatValue1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" floatValue2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" p "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"floatValue1 和 floatValue2 相等"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("可以看到，我们的解决方案是一种近似判断，通过一个可以接受的最小误差值 p，约定如果两个浮点数的差值在此精度的误差范围之内，则判定这两个浮点数相等。这个解决方案也是其他语言判断浮点数相等所采用的通用方案。")]),a._v(" "),t("h2",{attrs:{id:"复数类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复数类型"}},[a._v("#")]),a._v(" 复数类型")]),a._v(" "),t("p",[a._v("除了整型和浮点型之外，Go 语言还支持复数类型，与复数相对，我们可以把整型和浮点型这种日常比较常见的数字称为实数，复数是实数的延伸，可以通过两个实数（在计算机中用浮点数表示）构成，一个表示实部（real），一个表示虚部（imag），常见的表达形式如下：")]),a._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[a._v("z "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" bi\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("其中 a、b 均为实数，i 称为虚数单位，当 b = 0 时，z 就是常见的实数，当 a = 0 而 b ≠ 0 时，将 z 称之为纯虚数，如果你理解数学概念中的复数概念，这些都很好理解，下面我们来看下复数在 Go 语言中的表示和使用。")]),a._v(" "),t("p",[a._v("在 Go 语言中，复数支持两种类型："),t("strong",[a._v("complex64")]),a._v("（32 位实部和虚部） 和 "),t("strong",[a._v("complex128")]),a._v("（64 位实部与虚部），对应的表示示例如下，和数学概念中的复数表示形式一致：")]),a._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" complexValue1 "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("complex64")]),a._v("        \n\ncomplexValue1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.10")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10i")]),a._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 由两个 float32 实数构成的复数类型")]),a._v("\ncomplexValue2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.10")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10i")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 和浮点型一样，默认自动推导的实数类型是 float64，所以 complexValue2 是 complex128 类型")]),a._v("\ncomplexValue3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("complex")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 与 complexValue2 等价")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("对于一个复数 "),t("code",[a._v("z = complex(x, y)")]),a._v("，就可以通过 Go 语言内置函数 "),t("code",[a._v("real(z)")]),a._v("获得该复数的实部，也就是 x，通过 "),t("code",[a._v("imag(z)")]),a._v(" 获得该复数的虚部，也就是 y。")]),a._v(" "),t("p",[a._v("复数支持和其它数字类型一样的算术运算符。当你使用 == 或者 != 对复数进行比较运算时，由于构成复数的实数部分也是浮点型，需要注意对精度的把握。")]),a._v(" "),t("p",[a._v("更多关于复数的函数，请查阅 "),t("a",{attrs:{href:"https://pkg.go.dev/math/cmplx",target:"_blank",rel:"noopener noreferrer"}},[a._v("math/cmplx "),t("OutboundLink")],1),a._v("标准库的文档。如果你对内存的要求不是特别高，最好使用 complex128 作为计算类型，因为相关函数大都使用这个类型的参数。")])])}),[],!1,null,null,null);s.default=n.exports}}]);