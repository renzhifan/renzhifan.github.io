(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{451:function(s,a,e){"use strict";e.r(a);var t=e(33),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("blockquote",[e("p",[s._v("如何实现服务器之间的协同功能呢？")])]),s._v(" "),e("p",[s._v("通过 "),e("code",[s._v("Nginx")]),s._v(" 提供的"),e("code",[s._v("反向代理")]),s._v("和"),e("code",[s._v("负载均衡")]),s._v("功能，可以合理的完成业务的分配，提高网站的处理能力；同时利用缓存功能，还可以将不需要实时更新的动态页面输出结果，转化为静态网页形成缓存，从而提高网站的响应速度。")]),s._v(" "),e("h2",{attrs:{id:"代理和反向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代理和反向代理"}},[s._v("#")]),s._v(" 代理和反向代理")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("代理（正向代理，目标服务器不知道谁在访问）")])])]),s._v(" "),e("blockquote",[e("p",[s._v("位于客户端和目标服务器之间，起到一个中转的作用。其实就是客户端想访问目标服务器，但是因为某些原因不能够直接访问，则把请求和目标服务器发给代理服务器，代理服务器再去请求目标服务器，把返回的响应结果返回给客户端。")])]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("反向代理（用户实际并不知道最终服务器，只是访问一个反向代理服务器而已）")])])]),s._v(" "),e("blockquote",[e("p",[s._v("客户端会把反向代理服务器当成目标服务器，向反向代理服务器发送请求后，反向代理服务器再请求内部的后端服务器，把得到的响应结果返回给客户端。")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/renzhifan/image/master/img/20210326172424.png",alt:""}})]),s._v(" "),e("p",[s._v("特性：")]),s._v(" "),e("ul",[e("li",[s._v("安全性。反向代理具有安全性。能隐藏真实的内部服务器。")]),s._v(" "),e("li",[s._v("功能性。正向代理主要用途是为防火墙内的局域网用户提供访问外网的途径。反向代理主要用途是将防火墙内的服务器提供给外边的用户访问，同时也可以为多个后端服务器提供负载均衡功能、缓存功能等。")])]),s._v(" "),e("h2",{attrs:{id:"反向代理服务配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反向代理服务配置"}},[s._v("#")]),s._v(" 反向代理服务配置")]),s._v(" "),e("p",[s._v("在 Nginx 配置文件中的 location 块中，这是 "),e("code",[s._v("proxy_pass")]),s._v(" 指令。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("server{\nlisten 80;\n  server_name test.test;\n  #将本机接收到的test.test的请求全部转发到另外一台服务器192.168.78.128\n  location /{\n    proxy_pass http://192.168.78.128; \n    #下面是其他辅助指令\n    proxy_set_header Host $host; #更改来自客户端的请求头信息\n    proxy_set_header X-Real_IP $remote_addr;    #用户真实访问ip\n    proxy_connect_timeout 2; #配置nginx与后端服务器建立连接的超时时间\n    proxy_read_timeout 2; #配置nginx向后端发出read请求的等待响应超时时间\n    proxy_send_timeout 2; #配置nginx向后端服务器发出write请求的等待响应超时时间\n    proxy_redirect http://www.baidu.com; #用于修改后端服务器返回的响应头中的Location和Refresh\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("h2",{attrs:{id:"负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[s._v("#")]),s._v(" 负载均衡")]),s._v(" "),e("blockquote",[e("p",[s._v("负载均衡（load balance）：就是将负载分摊到多个操作单元上执行，从而提高服务的可用性和响应速度。")])]),s._v(" "),e("ul",[e("li",[s._v("一个没有负载均衡的 web 架构如下图：\n"),e("img",{attrs:{src:"https://raw.githubusercontent.com/renzhifan/image/master/img/20210326172744.png",alt:""}})])]),s._v(" "),e("p",[s._v("用户直接连接服务器，这个时候如果这台服务器挂了，那么就整个网站挂了。")]),s._v(" "),e("ul",[e("li",[s._v("有负载均衡的 web 架构")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/renzhifan/image/master/img/20210326172819.png",alt:""}})]),s._v(" "),e("p",[s._v("用户不直接访问后端服务器，而是访问负载均衡服务器，由负载均衡服务器再次转发到后端服务器。如果这个时候有一台后端服务器挂掉了，那么负载均衡服务器会剔除掉它，将后续请求都转发到好的那台，这样就不影响网站的正常运行。这个时候我们也需要考虑负载均衡服务器会不会挂掉，那就引入第二个负载均衡服务器来缓解一下。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/renzhifan/image/master/img/20210326175555.png",alt:""}})]),s._v(" "),e("h2",{attrs:{id:"负载均衡的配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡的配置"}},[s._v("#")]),s._v(" 负载均衡的配置")]),s._v(" "),e("blockquote",[e("p",[s._v("通过配置负载均衡服务器的 Nginx 中的 upstream 指令可以实现。")])]),s._v(" "),e("p",[s._v("不同负载均衡配置的特点如下图所示：")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("配置方式")]),s._v(" "),e("th",[s._v("说明")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("轮询方式（默认）")]),s._v(" "),e("td",[s._v("每个请求按照时间顺序逐一分配到不同的后端服务器，如果有服务器宕机，会自动剔除。")])]),s._v(" "),e("tr",[e("td",[s._v("权重方式（weight）")]),s._v(" "),e("td",[s._v("利用 weight 制定轮询的权重比率，与访问率成正比，用于后端服务器性能不均的情况，性能好的服务器 weight 高一点。")])]),s._v(" "),e("tr",[e("td",[s._v("ip_hash")]),s._v(" "),e("td",[s._v("使每个访客固定访问一个后端服务器，这样可以解决 session 共享的问题。")])]),s._v(" "),e("tr",[e("td",[s._v("第三方模块（fair、url_hash）nginx 默认不包含第三方模块，使用时需要安装")]),s._v(" "),e("td",[s._v("第三方模块采用 fair，按照每台服务器的响应时间来分配，响应时间短的优先分配。如果第三方模块采用的是 url_hash，则安装 url 的 hash 值来分配。")])])])]),s._v(" "),e("h2",{attrs:{id:"一般轮询配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一般轮询配置"}},[s._v("#")]),s._v(" 一般轮询配置")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("server{\n    listen 80;\n  server_name test.test;\n  location / {\n    proxy_pass http://web_server; #反向代理\n  }\n}\n#配置负载均衡服务器组\nupstream web_server {\n    server 192.168.78.128;\n  server 192.168.78.129;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("h2",{attrs:{id:"加权轮询配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加权轮询配置"}},[s._v("#")]),s._v(" 加权轮询配置")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("#配置负载均衡服务器组\nupstream web_server {\n    server 192.168.78.128 weight=1;\n  server 192.168.78.129 weight=3;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("这里面的权值总和为一个循环，这里以 4 次为一个循环，那么就是每四次请求中，三次会被分派到 129 这个服务器，一次分配到 128，但是具体三次并不会顺序执行，而是按照算法分散执行。\n我们也可以设置每台 web 服务器在负载均衡调度中的状态")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("upstream web_server{\n    server 192.168.78.128 weight=1 max_fails=1 fail_timeout=2; #允许请求失败次数，在请求max_fail次数失败后，暂停服务的时间\n  server 192.168.78.200 backup; #预留的备份服务器\n  server 192.168.78.33 down; #当前服务器不参与负载均衡\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"ip-hash-配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ip-hash-配置"}},[s._v("#")]),s._v(" ip_hash 配置")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("upstream web_server{\n    ip_hash;\n  server 192.168.78.120;\n  server 192.168.78.123;\n  server 192.168.78.33 down; #如果这台服务器宕机，则用down表示当前服务器暂不参与负载均衡\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("blockquote",[e("p",[s._v("使用 ip_hash 的时候，不能使用 weight 和 backup。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);