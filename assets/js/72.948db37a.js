(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{486:function(e,t,a){"use strict";a.r(t);var s=a(33),_=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"php-fpm进程分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php-fpm进程分配"}},[e._v("#")]),e._v(" php-fpm进程分配")]),e._v(" "),a("blockquote",[a("p",[e._v("在"),a("code",[e._v("fasgcgi")]),e._v("模式下，php会启动多个"),a("code",[e._v("php-fpm")]),e._v("进程，来接收"),a("code",[e._v("nginx")]),e._v("发来的请求，那是不是进程越多，速度就越快呢？这可不一定！得根据我们的机器配置和业务量来决定。")])]),e._v(" "),a("ul",[a("li",[e._v("我们先来看下，设定进程的配置在哪里？")])]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("pm "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" static "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" dynamic "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" ondemand\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("pm可以设置成这样3种，我们用的最多的就上前面2种。")]),e._v(" "),a("h2",{attrs:{id:"pm-static-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pm-static-模式"}},[e._v("#")]),e._v(" pm = static 模式")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("pm = static")]),e._v(" 表示我们创建的"),a("code",[e._v("php-fpm")]),e._v("子进程数量是固定的，那么就只有"),a("code",[e._v("pm.max_children = 50")]),e._v("这个参数生效。\n你启动php-fpm的时候就会一起全部启动51(1个主＋50个子)个进程。")])]),e._v(" "),a("h2",{attrs:{id:"pm-dynamic-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pm-dynamic-模式"}},[e._v("#")]),e._v(" pm = dynamic 模式")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("pm = dynamic模式")]),e._v("，表示启动进程是动态分配的，随着请求量动态变化的。他由 "),a("code",[e._v("pm.max_children")]),e._v("，"),a("code",[e._v("pm.start_servers")]),e._v("，"),a("code",[e._v("pm.min_spare_servers")]),e._v("，"),a("code",[e._v("pm.max_spare_servers")]),e._v(" 这几个参数共同决定")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("配置项")]),e._v(" "),a("th",{staticStyle:{"text-align":"center"}},[e._v("描述")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("code",[e._v("pm.max_children = 50")])]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("是最大可创建的子进程的数量。"),a("code",[e._v("必须设置")]),e._v("。这里表示最多只能50个子进程")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("pm.start_servers = 20")])]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("随着php-fpm一起启动时创建的子进程数目。默认值："),a("code",[e._v("min_spare_servers + (max_spare_servers - min_spare_servers) / 2")]),e._v("。这里表示，一起启动会有20个子进程")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("pm.min_spare_servers = 10")])]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("设置服务器空闲时最小"),a("code",[e._v("php-fpm")]),e._v("进程数量。"),a("code",[e._v("必须设置")]),e._v("。如果空闲的时候，会检查如果少于10个，就会启动几个来补上")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("pm.max_spare_servers = 30")])]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("设置服务器空闲时最大"),a("code",[e._v("php-fpm")]),e._v("进程数量。"),a("code",[e._v("必须设置")]),e._v("。如果空闲时，会检查进程数，多于30个了，就会关闭几个，达到30个的状态")])])])]),e._v(" "),a("h2",{attrs:{id:"ondemand-模式-动态需求模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ondemand-模式-动态需求模式"}},[e._v("#")]),e._v(" ondemand 模式（动态需求模式）")]),e._v(" "),a("blockquote",[a("p",[e._v("这种模式和 "),a("code",[e._v("dynamic")]),e._v(" 模式相反。因为这种模式把内存放在第一位，每个闲置进程在持续闲置了 "),a("code",[e._v("pm.process_idle_timeout")]),e._v(" 秒后就会被杀死，\n因为这种模式，到了服务器低峰期的时候，内存就会降下来，\n如果服务器长时间没有请求，就只有一个主进程。\n其弊端是，遇到高峰期或者 "),a("code",[e._v("pm.process_idle_timeout")]),e._v(" 设置太小，\n无法避免服务器频繁创建进程的问题")])]),e._v(" "),a("h2",{attrs:{id:"到底选择static还数dynamic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#到底选择static还数dynamic"}},[e._v("#")]),e._v(" 到底选择static还数dynamic?")]),e._v(" "),a("p",[e._v("一般原则是：")]),e._v(" "),a("ul",[a("li",[e._v("动态适合小内存机器，灵活分配进程，省内存。")]),e._v(" "),a("li",[e._v("静态适用于大内存机器，动态创建回收进程对服务器资源也是一种消耗。")])]),e._v(" "),a("blockquote",[a("p",[e._v("如果你的内存很大，有8-20G，按照一个"),a("code",[e._v("php-fpm")]),e._v("进程20M算，\n100个就2G内存了，那就可以开启static模式。")])]),e._v(" "),a("blockquote",[a("p",[e._v("如果你的内存很小，比如才256M，那就要小心设置了，因为你的机器里面的其他的进程也算需要占用内存的，所以设置成dynamic是最好的，比如：pm.max_chindren = 8, 占用内存160M左右，而且可以随时变化，对于一半访问量的网站足够了")])]),e._v(" "),a("h2",{attrs:{id:"慢日志查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#慢日志查询"}},[e._v("#")]),e._v(" 慢日志查询")]),e._v(" "),a("blockquote",[a("p",[e._v("我们有时候会经常饱受"),a("code",[e._v("500")]),e._v(","),a("code",[e._v("502")]),e._v("问题困扰。当"),a("code",[e._v("nginx")]),e._v("收到如上错误码时，可以确定后端"),a("code",[e._v("php-fpm")]),e._v("解析php出了某种问题，比如，执行错误，执行超时")])]),e._v(" "),a("p",[e._v("这个时候，我们是可以开启慢日志功能的。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("slowlog = /usr/local/var/log/php-fpm.log.slow\nrequest_slowlog_timeout = 15s\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("当一个请求该设置的超时时间15秒后，就会将对应的PHP调用堆栈信息完整写入到慢日志中。")]),e._v(" "),a("p",[e._v("php-fpm慢日志会记录下进程号，脚本名称，具体哪个文件哪行代码的哪个函数执行时间过长：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[21-Nov-2013 14:30:38] [pool www] pid 11877\nscript_filename = /usr/local/lnmp/nginx/html/www.quancha.cn/www/fyzb.php\n[0xb70fb88c] file_get_contents() /usr/local/lnmp/nginx/html/www.quancha.cn/www/fyzb.php:2\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("通过日志，我们就可以知道第2行的file_get_contents 函数有点问题，这样我们就能追踪问题了。")])])}),[],!1,null,null,null);t.default=_.exports}}]);