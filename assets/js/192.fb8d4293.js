(window.webpackJsonp=window.webpackJsonp||[]).push([[192],{607:function(t,v,r){"use strict";r.r(v);var e=r(33),o=Object(e.a)({},(function(){var t=this,v=t.$createElement,r=t._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("blockquote",[r("p",[t._v("RabbitMQ工作队列（Work模式），一个生产者，多个消费者，每条消息只能被一个消费者消费，"),r("strong",[t._v("支持并发消费消息")]),t._v("。")]),t._v(" "),r("blockquote",[r("p",[t._v("提示：Work模式，相对于简单队列来说就是支持并发消费消息，但是一条消息只能被一个消费者处理，"),r("strong",[t._v("因此Work模式也是一对一消费模式")]),t._v("。")])])]),t._v(" "),r("h2",{attrs:{id:"架构图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#架构图"}},[t._v("#")]),t._v(" 架构图")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/renzhifan/upic_img/master/uPic/2022/05/16/11-01-42-8vCwgT-S6jvDd.jpg",alt:"11-01-42-8vCwgT-S6jvDd"}})]),t._v(" "),r("p",[t._v("说明：\n"),r("code",[t._v("P")]),t._v(" 代表生产者 , "),r("code",[t._v("C1")]),t._v("、"),r("code",[t._v("C2")]),t._v(" 代表消费者，红色代表队列。")]),t._v(" "),r("h2",{attrs:{id:"应用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),r("p",[r("code",[t._v("单一业务，一对一并发处理")]),t._v("，例如："),r("strong",[t._v("群发邮件")]),t._v("，需要发送1000封邮件，可以开启100个消费者，一次并发发送100封邮件。")]),t._v(" "),r("blockquote",[r("p",[t._v("提示：在多个消费者并发消费同一个队列的消息的情况下，无法保证消息的严格顺序，例如：队列中有10条消息，有10个消费者并发处理10个消息，有些消费者执行快、有些执行慢点，这个时候会出现消息处理的顺序，跟队列中消息的顺序不一致，可能后面的消息先执行成功，前面的消息还在处理中，如果你的业务对消息的顺序有严格要求，可以控制每个队列只有一个消费者，这样就可以保证严格消息处理顺序，代价就是并发能力下降。")])])])}),[],!1,null,null,null);v.default=o.exports}}]);