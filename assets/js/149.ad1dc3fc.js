(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{563:function(t,s,e){"use strict";e.r(s);var a=e(33),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"mysql的基本架构示意图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql的基本架构示意图"}},[t._v("#")]),t._v(" Mysql的基本架构示意图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/renzhifan/image/master/img/20210124080110.png",alt:""}})]),t._v(" "),e("ul",[e("li",[t._v("1.Mysql可以分为"),e("code",[t._v("Server")]),t._v("层和"),e("code",[t._v("存储引擎层")]),t._v("两部分")]),t._v(" "),e("li",[t._v("2.Server层：包含"),e("code",[t._v("连接器")]),t._v("，"),e("code",[t._v("查询缓存")]),t._v("，"),e("code",[t._v("分析器")]),t._v("，"),e("code",[t._v("优化器")]),t._v("，执行器`等，涵盖了MySQL的大多数核心功能区以及所有的内置函数。\n"),e("ul",[e("li",[t._v("2-1.内置函数："),e("code",[t._v("日期")]),t._v("，"),e("code",[t._v("时间")]),t._v("，"),e("code",[t._v("数学")]),t._v("和"),e("code",[t._v("加密函数")]),t._v("等；")]),t._v(" "),e("li",[t._v("2-2.所有跨存储引擎的功能都在这一层实现，例如"),e("code",[t._v("存储过程")]),t._v("，"),e("code",[t._v("触发器")]),t._v("，"),e("code",[t._v("视图")]),t._v("等；")])])]),t._v(" "),e("li",[t._v("3.存储引擎层：负责数据的存储和提取。\n"),e("ul",[e("li",[t._v("3-1.架构模式：插件式的，支持InnoDB（目前也是最常用的，MySQL5.5后默认存储引擎）、MyISAM、Memory等多个存储引擎。")]),t._v(" "),e("li",[t._v("3-2.create table 时不指定引擎类型，默认使用的就是InnoDB.如果使用其他类型，可以利用create table语句中使用"),e("code",[t._v("engine=memory")]),t._v("，等来指定使用内存引擎来创建表。不同的存储引擎数据存储方式不同，支持的功能也不同。")])])]),t._v(" "),e("li",[t._v("4.不同的存储引擎"),e("code",[t._v("共用一个server层")]),t._v("，结合一个例子我们从总体上了解一下各部件的功能。")])]),t._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("select * from table where id=1;\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"一、连接器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、连接器"}},[t._v("#")]),t._v(" 一、连接器")]),t._v(" "),e("blockquote",[e("p",[t._v("负责跟客户端建立连接，获取权限，维持和管理连接，这个连接器位于"),e("code",[t._v("server层")]),t._v("，\n我们通过连接器可以让客户端和server层连接起来，从而登录到mysql。连接命名如下：")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("选项")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("默认")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("-u")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("账号")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("当前系统同名帐号")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("-p")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("密码")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("-P")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("连接端口")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3306")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("-h")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("主机地址")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("127.0.0.1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("-e")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("执行sql指令")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("mysql -uroot -p -P3306 -h "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("在命令输完之后，我们需要在交互界面输入密码。虽然在-p后面我们可以把密码直接写上，但是不建议这样搞，太不安全。")]),t._v(" "),e("h3",{attrs:{id:"连接过程是怎样的呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连接过程是怎样的呢"}},[t._v("#")]),t._v(" 连接过程是怎样的呢？")]),t._v(" "),e("ul",[e("li",[t._v("链接命令中的mysql是客户端工具，用来跟服务器建立连接。")]),t._v(" "),e("li",[t._v("经典的TCP握手之后，服务器开始验证身份。我们这个时候要用到输入的用户名和密码：\n"),e("ul",[e("li",[t._v("如果用户名和密码不对，我们会被反馈"),e("code",[t._v("“Access denied for user”")]),t._v("的错误(客户端程序结束执行）。")]),t._v(" "),e("li",[t._v("如果用户名和密码正确，连接器回到权限表里找到我们所拥有的权限。之后在这个连接面里的权限判断逻辑，都会依赖于此时读到的权限。（"),e("strong",[t._v("如果一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响到已经存在连接的权限，修改完成后，只有在新建的连接才会使用新的权限设置")]),t._v("）；")])])])]),t._v(" "),e("h3",{attrs:{id:"连接完成之后呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连接完成之后呢"}},[t._v("#")]),t._v(" 连接完成之后呢？")]),t._v(" "),e("ul",[e("li",[t._v("如果你没有后续的动作，这个连接就会空闲下来，使用"),e("code",[t._v("show processlist")]),t._v(" 命令中看到它。")]),t._v(" "),e("li",[t._v("客户端如果太长时间没用动静，连接器就会自动断开，这个时间是由"),e("code",[t._v("wait_timeout")]),t._v("控制的，默认是"),e("code",[t._v("8小时")]),t._v("。")]),t._v(" "),e("li",[t._v("如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误的提醒："),e("code",[t._v("Lost connection to Mysql server during query")]),t._v("。这时候如果要继续，就需要重连，然后在执行请求了。")])]),t._v(" "),e("h3",{attrs:{id:"show-processlist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#show-processlist"}},[t._v("#")]),t._v(" show processlist")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("show processlist")]),t._v(" 补充说明  我在本地创建了两个连接 查出的结果如下")])]),t._v(" "),e("div",{staticClass:"language-shell script line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("mysql"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" show processlist"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n+----+------+-----------+------+---------+------+----------+------------------+\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" User "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Host      "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" db   "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Command "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Time "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" State    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Info             "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n+----+------+-----------+------+---------+------+----------+------------------+\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" root "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" localhost "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NULL "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Query   "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" starting "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" show processlist "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" root "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" localhost "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NULL "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Sleep   "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("          "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NULL             "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n+----+------+-----------+------+---------+------+----------+------------------+\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" rows "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("h3",{attrs:{id:"长连接和短连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#长连接和短连接"}},[t._v("#")]),t._v(" 长连接和短连接：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("长连接")]),t._v("：在数据库里面，长连接是指连接成功之后，如果客户端持续有请求，则一直使用同一个连接。")]),t._v(" "),e("li",[e("strong",[t._v("短连接")]),t._v("：指的是每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。")])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("建立连接的过程很复杂，建议在使用中尽量减少建立连接的动作，也就是尽量使用长连接；")])])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("问题：但是如果全部使用长连接的话，你可能会发现Mysql占用内存特别快。")])]),t._v(" "),e("li",[e("strong",[t._v("原因")]),t._v("：MySQL在执行的时候临时使用的内存是管理在连接对象里面的，这些资源会在连接断开的时候释放，所以如果长连接列累积下来，可能会导致内存占用太大，被系统强制杀死（OOM）：")]),t._v(" "),e("li",[e("strong",[t._v("表现")]),t._v("：MySQL异常重启。")]),t._v(" "),e("li",[e("strong",[t._v("解决方案")]),t._v("：\n"),e("ul",[e("li",[t._v("定期断开长连接，使用一段时间，或者程序里面判断执行过一个占内存的大查询后，断开连接，之后要查询再重连。")]),t._v(" "),e("li",[t._v("如果使用的是MySQL 5.7或者更高的版本，可以在每次执行一个比较大的操作后，通过执行"),e("code",[t._v("mysql_reset_connection")]),t._v("来重新初始化链接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态")])])])]),t._v(" "),e("h2",{attrs:{id:"二、查询缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、查询缓存"}},[t._v("#")]),t._v(" 二、查询缓存")]),t._v(" "),e("p",[e("strong",[t._v("查询缓存")]),t._v("：在连接建立完成之后，我们就可以执行"),e("code",[t._v("select")]),t._v("语句了。具体过程是怎样的呢？")]),t._v(" "),e("ul",[e("li",[t._v("1.MySQL拿到一个查询请求之后，会到查询缓存看看，之前是否执行过这样的一条语句（之前执行过的语句及其结果可能会以"),e("code",[t._v("key-value")]),t._v("对的形式，被直接存放到内存中，"),e("code",[t._v("key")]),t._v("是查询的语句，"),e("code",[t._v("value")]),t._v("是查询的结果）")]),t._v(" "),e("li",[t._v("2.如果你的查询能够直接在这个缓存中找到key,那么这个value就会被直接返回给客户端")]),t._v(" "),e("li",[t._v("3.如果语句不在查询缓存中，就会继续后面的执行阶段，执行完成后，执行结果会被存入到查询缓存中")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("你可以看到，如果查询命中缓存，MySQL不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高")])])]),t._v(" "),e("p",[e("strong",[e("code",[t._v("但是大多数情况下我会建议你不要使用查询缓存，为什么呢？")])])]),t._v(" "),e("blockquote",[e("ol",[e("li",[t._v("因为查询缓存往往弊大于利。 查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。")]),t._v(" "),e("li",[t._v("因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。")]),t._v(" "),e("li",[t._v("对于更新压力大的数据库来说，查询缓存的命中率会非常低。")]),t._v(" "),e("li",[t._v("除非你的业务就是有一张静态表，很长时间才会更新一次。")]),t._v(" "),e("li",[t._v("比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。")])])]),t._v(" "),e("p",[t._v("好在MySQL也提供了这种“按需使用”的方式。你可以将"),e("code",[t._v("参数query_cache_type设置成DEMAND，这样对于默认的SQL语句都不使用查询缓存")]),t._v("。而对于你"),e("code",[t._v("确定要使用查询缓存的语句，可以用SQL_CACHE显式指定")]),t._v("，像下面这个语句一样：")]),t._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("select SQL_CACHE * from T where ID=10；\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("blockquote",[e("p",[e("strong",[e("code",[t._v("需要注意的是，MySQL 8.0版本直接将查询缓存的整块功能删掉了，也就是说8.0开始彻底没有这个功能了")])]),t._v("。")])]),t._v(" "),e("h2",{attrs:{id:"三、分析器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、分析器"}},[t._v("#")]),t._v(" 三、分析器")]),t._v(" "),e("p",[t._v("如果没有命中缓存，就要开始真正的执行SQL语句了，首先SQL语句需要知道你在做什么，因此需要对SQL语句做出解析。")]),t._v(" "),e("p",[t._v("分析器做的工作如下")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mysql> select * from T where ID=;（以这个语句为例子）\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("strong",[t._v("词法分析")]),t._v("：你输入的是由多个字符串和空格组成的一条SQL语句，Mysql需要识别出里面的字符分别是什么，代表什么。\nMySQL从你输入的“select”这个关键子识别出来，这是一条查询语句，\n他也要把字符串“T”识别成“表名T”,把字符串“ID”识别成“列ID”。")]),t._v(" "),e("p",[e("strong",[t._v("语法分析")]),t._v('：根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个SQL语句是否满足MySQL语法。\n如果你输入的语句不对，你会收到“you have an error in your SQL syntax”的错误提醒，\n比如下面这个语句select少打了一个字母"S"。')]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("mysql"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" elect * from t where "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ID")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nERROR "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1064")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": You have an error "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" your SQL syntax"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" check the manual that corresponds to your MySQL\nserver version "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the right syntax to use near "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'elect * from t where ID=1'")]),t._v(" at line "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("blockquote",[e("p",[t._v("一般来说语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。")])]),t._v(" "),e("h2",{attrs:{id:"四、优化器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、优化器"}},[t._v("#")]),t._v(" 四、优化器")]),t._v(" "),e("p",[t._v("经过了分析器，MySQL就知道你要做什么了，在开始执行之前，还要经过优化器的处理。")]),t._v(" "),e("p",[t._v("1.优化器是在表里面有多个索引的时候，决定使用哪个索引；\n2.在一个语句有多表关联（join）的时候，决定各个表的连接顺序。")]),t._v(" "),e("p",[t._v("比如你执行下面这样的语句，这个语句是执行两个表的join：")]),t._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("select * from t1 join t2 using(ID) where t1.c=10 and t2.d=20;\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("ul",[e("li",[t._v("既可以先从表t1里面取出c=10的记录的ID值，再根据ID值关联到表t2，再判断t2里面d的值是否等于20。")]),t._v(" "),e("li",[t._v("也可以先从表t2里面取出d=20的记录的ID值，再根据ID值关联到t1，再判断t1里面c的值是否等于10。")])]),t._v(" "),e("blockquote",[e("p",[t._v("这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪 一个方案。 优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段.")])]),t._v(" "),e("h2",{attrs:{id:"五、执行器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、执行器"}},[t._v("#")]),t._v(" 五、执行器")]),t._v(" "),e("p",[t._v("MySQL通过分析器知道你要干啥了，通过优化器知道该怎么去干了。于是就进入到执行器阶段了，开始干活！")]),t._v(" "),e("p",[t._v("其中的流程如下：")]),t._v(" "),e("p",[t._v("1.判断你是否对这个表T有没有查询的权限，如果没有，就会返回没有权限的错误，如下所示：")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from T where "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ID")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("ERROR "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1142")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": SELECT "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" denied to user "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v("@"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'localhos'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" table "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'T'")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("判断如果你有权限，那就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。例如我们的这个例子中的表T中，ID字段没有索引，那么执行器的执行流程是这样的")])]),t._v(" "),e("ul",[e("li",[t._v("调用InnoDB引擎接口取这个表的第一行，判断ID的值是不是10，如果不是则跳过，如果是则将这行存在结果集中；")]),t._v(" "),e("li",[t._v("调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行；")]),t._v(" "),e("li",[t._v("执行器将上述遍历过程中所有满足条件的行组成记录集作为结果集返回给客户端。\n"),e("strong",[t._v("至此这个语句结束了")])])]),t._v(" "),e("blockquote",[e("ol",[e("li",[t._v("对于有索引的表，执行的逻辑也差不多，第一次调用的是“取满足条件的第一行”这个接口")]),t._v(" "),e("li",[t._v("之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中定义好的。")]),t._v(" "),e("li",[t._v("你会在数据库的慢查询日志中看到看一个"),e("code",[t._v("rows_examined")]),t._v("字段，表示这个语句执行过程中扫描了多少行，这个值就是在执行器每次调用引擎获取数据行的时候累加的。")]),t._v(" "),e("li",[t._v("在有些场景下，执行器调用一次，在引擎内部则扫描了很多行，因此引擎扫描行数跟"),e("code",[t._v("rows_examined")]),t._v("并不是完全相同的。")])])]),t._v(" "),e("p",[t._v("逻辑架构大体就是这样子了")])])}),[],!1,null,null,null);s.default=r.exports}}]);