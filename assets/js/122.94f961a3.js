(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{536:function(s,t,a){"use strict";a.r(t);var n=a(33),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("通过前面几篇教程，已经陆续介绍完了 Go 语言中的基本数据类型，分别是"),a("strong",[s._v("布尔类型")]),s._v("、"),a("strong",[s._v("整型")]),s._v("、"),a("strong",[s._v("浮点型")]),s._v("、"),a("strong",[s._v("复数类型")]),s._v("、"),a("strong",[s._v("字符串")]),s._v("和"),a("strong",[s._v("字符类型")]),s._v("，此外，Go 语言还支持这些基本数据类型之间的转化，不过由于 Go 是强类型语言，所以不支持动态语言那种自动转化，而是要对变量进行强制类型转化。")]),s._v(" "),a("p",[s._v("下面，我们来看看在 Go 语言中如何实现不同数据类型之间的强制转化。")]),s._v(" "),a("h2",{attrs:{id:"数值类型之间的转化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值类型之间的转化"}},[s._v("#")]),s._v(" 数值类型之间的转化")]),s._v(" "),a("h3",{attrs:{id:"整型之间的转化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整型之间的转化"}},[s._v("#")]),s._v(" 整型之间的转化")]),s._v(" "),a("p",[s._v("关于数值类型之间的转化，我们前面在介绍"),a("strong",[s._v("运算符")]),s._v("的时候已经提到过，在进行类型转化时只需要调用要转化的数据类型对应的函数即可：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("v1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化 v1 类型为 unit")]),s._v("\nv2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("int8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将 v1 转化为 int8 类型并赋值给 v2")]),s._v("\nv3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uint16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将 v2 转化为 uint16 类型并赋值给 v3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("看起来很简单，不过需要注意，在有符号与无符号以及高位数字向低位数字转化时，需要注意数字的溢出和截断。")]),s._v(" "),a("p",[s._v("比如我们看这个例子：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("v1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("由于 uint 是无符号整型，无符号数字不包含负数，所以上述转化编译时会报溢出错误：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("constant -255 overflows uint\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("我们将上述代码改造如下，将无符号数字转化为有符号数字：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("v1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nv2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("int8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// v2 = -1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("由于 int8 能够表示的范围是 -128~127，255 超出其表示范围，所以，会截取后8位，v1 是一个无符号整型，后八位都是 1，int8 是一个有符号的整型，所以最高位作为符号位，因此转化后的数字 v2 是负数，取 1111 1111 的补码，所以转化结果是 -1。")]),s._v(" "),a("p",[s._v("有人可能困惑为啥是 -1，而不是 -127，这就要了解计算机底层是如何表示数字的了。")]),s._v(" "),a("h3",{attrs:{id:"原码、反码和补码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原码、反码和补码"}},[s._v("#")]),s._v(" 原码、反码和补码")]),s._v(" "),a("p",[s._v("计算机底层是通过二进制表示数字的，我们把这种二进制形式的数字称之为"),a("strong",[s._v("机器数")]),s._v("，数字是有正负之分的，这个正负是通过机器数的第一位作为标识的（俗称符号位）：0 表示正数，1 表示负数。为区别有符号数真实值与形式值的不同，又将带符号位的机器数对应的真正数值称为机器数的"),a("strong",[s._v("真值")]),s._v("（无符号数的真值就是自身）。\n除了基本的二进制数字外，计算机还提供了三种数字编码方式：原码、反码和补码。")]),s._v(" "),a("p",[a("strong",[s._v("原码")]),s._v("就是符号位+真值，比如：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("+1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("原 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0000 0001\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("原 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" 0001\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("以 8 位二进制数表示范围为例，使用原码的话对应的区间范围是 [11111111, 01111111]，即 "),a("strong",[s._v("[-127, 127]")]),s._v("。")]),s._v(" "),a("p",[s._v("我们接着来看"),a("strong",[s._v("反码")]),s._v("，正数的反码是自身，负数的反码是在其原码基础上，符号位不变，其余各位按位取反。比如：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("+1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("反 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0000 0001\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("反 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1110")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("以 8 位二进制数表示范围为例，使用反码的话对应的区间范围是 [11111111, 01111111]，还是 "),a("strong",[s._v("[-127, 127]")]),s._v("。")]),s._v(" "),a("p",[s._v("上面两种编码都存在一个问题，那就是数字 0 存在 +0 和 -0 两种编码：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("+0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("原 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0000 0000\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("原 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" 0000\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("+0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("反 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0000 0000\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("反 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这就导致数字 0 在计算机中的编码不唯一，对于凡事要求确定性的计算机来说，这是绝对不行的，为了解决这个问题，计算机科学家们又提出"),a("strong",[s._v("补码")]),s._v("的概念。\n正数的补码和反码一样，都是其自身，而负数的补码是在其原码基础上，符号位不变，其余各位按位取反，最后+1（即反码+1）。比如：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("+1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("补 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0000 0001\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("补 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("就是这个简单的 +1，却非常巧妙地解决了数字 0 双重编码的问题，现在，+0 的补码是 0000 0000，但是 -0 的补码变成了 1000 0001，所以只有一个表示 0 的编码了。")]),s._v(" "),a("p",[s._v("不仅如此，所有的负数都整体做了 +1 操作，之前的 1111 1111 由于进位溢出，变成了 1000 0000，我们将这个数字用于表示 -128，所以对于 8 位机器数，通过补码表示的话，现在的情况是：")]),s._v(" "),a("ul",[a("li",[s._v("正数区间依然是 [0, 127] 不变；")]),s._v(" "),a("li",[s._v("负数区间变成了 [-128, -1]（之前 [-127, -0] 每个数字 +1 演化而来）。")])]),s._v(" "),a("p",[s._v("这也是目前计算机系统底层 8 位整型数字的区间范围，所以计算机底层是通过补码来表示数字的，也只能通过补码来表示。")]),s._v(" "),a("p",[s._v("了解到这里，我们再来看为什么 uint 类型的 255 转化为 int8 类型的值后是 -1。")]),s._v(" "),a("p",[s._v("255 是无符号正数，补码和原码都是 255，即 16 个 1 组成的机器数，转化为 int8 类型后，由于 int8 只能存放 8 位机器数，所以会截取 255 后 8 位数字，也就是 1111 1111，int8 是有符号数字，第一位是符号位，所以真值是后 7 位，计算机底层通过补码表示数字，需要将其转化为补码，而这个数字又是负数，所以需要将后 7 位按位取反再 +1，也就是 1000 0001，即 -1。")]),s._v(" "),a("h2",{attrs:{id:"整型与浮点型之间的转化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整型与浮点型之间的转化"}},[s._v("#")]),s._v(" 整型与浮点型之间的转化")]),s._v(" "),a("p",[s._v("然后，我们再来看下整型和浮点型之间的转化，浮点型转化为整型时，小数位被丢弃：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("v1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99.99")]),s._v("\nv2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// v2 = 99")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("将整型转化为浮点型时，比较简单，直接调用对应的函数即可：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("v1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("\nv2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("float64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// v2 = 99")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"数值和布尔类型之间的转化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值和布尔类型之间的转化"}},[s._v("#")]),s._v(" 数值和布尔类型之间的转化")]),s._v(" "),a("p",[s._v("目前 Go 语言不支持将数值类型转化为布尔型，你需要自己根据需求去实现类似的转化。")]),s._v(" "),a("h2",{attrs:{id:"字符串和其他基本类型之间的转化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串和其他基本类型之间的转化"}},[s._v("#")]),s._v(" 字符串和其他基本类型之间的转化")]),s._v(" "),a("h3",{attrs:{id:"将整型转化为字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将整型转化为字符串"}},[s._v("#")]),s._v(" 将整型转化为字符串")]),s._v(" "),a("p",[s._v("整型数据可以通过 Unicode 字符集转化为对应的 UTF-8 编码的字符串：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("v1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65")]),s._v("\nv2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// v2 = A")]),s._v("\n\nv3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30028")]),s._v("\nv4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// v4 = 界")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("blockquote",[a("p",[s._v("Unicode 兼容 ASCII 字符集，所以 65 被转化为 A。")])]),s._v(" "),a("p",[s._v("此外，还可以将 byte 数组或者 rune 数组转化为字符串，因为字符串底层就是通过这两个基本字符类型构建的：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("    v1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'h'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'l'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'l'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'o'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\tv2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// v2 = hello")]),s._v("\n\n\tv3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("rune")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20320")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22909")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\tv4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// v4 = 你好")]),s._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"strconv-包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strconv-包"}},[s._v("#")]),s._v(" strconv 包")]),s._v(" "),a("p",[s._v("Go 语言默认不支持将字符串类型强制转化为数值类型，即使字符串中包含数字也不行。")]),s._v(" "),a("p",[s._v("如果要实现更强大的基本数据类型与字符串之间的转化，可以使用 Go 官方 strconv 包提供的函数：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("v1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"100"')]),s._v("\nv2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Atoi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将字符串转化为整型，v2 = 100")]),s._v("\n\nv3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\nv4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Itoa")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 将整型转化为字符串, v4 = "100"')]),s._v("\n\nv5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"true"')]),s._v("\nv6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ParseBool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将字符串转化为布尔型")]),s._v("\nv5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("FormatBool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将布尔值转化为字符串")]),s._v("\n\nv7 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"100"')]),s._v("\nv8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ParseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将字符串转化为整型，第二个参数表示进制，第三个参数表示最大位数")]),s._v("\nv7 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("FormatInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将整型转化为字符串，第二个参数表示进制")]),s._v("\n\nv9"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ParseUint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将字符串转化为无符号整型，参数含义同 ParseInt")]),s._v("\nv7 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("FormatUint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v9"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将字符串转化为无符号整型，参数含义同 FormatInt")]),s._v("\n\nv10 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"99.99"')]),s._v("\nv11"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ParseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v10"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将字符串转化为浮点型，第二个参数表示精度")]),s._v("\nv10 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("FormatFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v11"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'E'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nq "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Quote")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, 世界"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 为字符串加引号")]),s._v("\nq "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" strconv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("QuoteToASCII")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, 世界"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将字符串转化为 ASCII 编码")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("关于 strconv 包的更多功能，请查看对应的"),a("a",{attrs:{href:"https://pkg.go.dev/strconv",target:"_blank",rel:"noopener noreferrer"}},[s._v("包 API"),a("OutboundLink")],1),s._v("。")])])}),[],!1,null,null,null);t.default=r.exports}}]);