(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{586:function(t,s,n){"use strict";n.r(s);var a=n(33),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"mysql删除重复记录并且只保留一条-deptno-id-dname-名字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mysql删除重复记录并且只保留一条-deptno-id-dname-名字"}},[t._v("#")]),t._v(" mysql删除重复记录并且只保留一条(deptno id，dname 名字)")]),t._v(" "),n("h3",{attrs:{id:"a-第一种方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-第一种方法"}},[t._v("#")]),t._v(" a. 第一种方法：")]),t._v(" "),n("p",[t._v("根据depno来判断，除了rowid最小的一个")]),t._v(" "),n("div",{staticClass:"language-mysql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("SELECT\n\t*\nFROM\n\tdept\nWHERE\n\tdname IN (\n\t\tSELECT\n\t\t\tdname\n\t\tFROM\n\t\t\tdept\n\t\tGROUP BY\n\t\t\tdname\n\t\tHAVING\n\t\t\tCOUNT(1) > 1\n\t)\nAND deptno NOT IN (\n\tSELECT\n\t\tMIN(deptno)\n\tFROM\n\t\tdept\n\tGROUP BY\n\t\tdname\n\tHAVING\n\t\tCOUNT(1) > 1\n)\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br")])]),n("blockquote",[n("p",[t._v("上面这种写法正确，但是查询的速度太慢，可以试一下下面这种方法：")])]),t._v(" "),n("h3",{attrs:{id:"b-第二种方法-删除只是将select改为delete"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#b-第二种方法-删除只是将select改为delete"}},[t._v("#")]),t._v(" b. 第二种方法：(删除只是将select改为delete)")]),t._v(" "),n("blockquote",[n("p",[t._v("根据dname分组，查找出deptno最小的。然后再查找deptno不包含刚才查出来的。这样就查询出了所有的重复数据（除了deptno最小的那行）")])]),t._v(" "),n("div",{staticClass:"language-mysql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("SELECT *\nFROM\n\tdept\nWHERE\n\tdeptno NOT IN (\n\t\tSELECT\n\t\t\tdt.minno\n\t\tFROM\n\t\t\t(\n\t\t\t\tSELECT\n\t\t\t\t\tMIN(deptno) AS minno\n\t\t\t\tFROM\n\t\t\t\t\tdept\n\t\t\t\tGROUP BY\n\t\t\t\t\tdname\n\t\t\t) dt\n\n\t)\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br")])]),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("其实上面的方法还有很多需要优化的地方，如果数据量太大的话，执行起来很慢，可以考虑加优化一下：")]),t._v(" "),n("ul",[n("li",[t._v("在经常查询的字段上加上索引")]),t._v(" "),n("li",[t._v("将*改为你需要查询出来的字段，不要全部查询出来")]),t._v(" "),n("li",[t._v("小表驱动大表用IN，大表驱动小表用EXISTS。"),n("strong",[t._v("IN适合的情况是外表数据量小的情况，而不是外表数据大的情况")]),t._v("，因为IN会遍历外表的全部数据，假设a表100条，b表10000条那么遍历次数就是100*10000次，而exists则是执行100次去判断a表中的数据是否在b表中存在，它只执行了a.length次数。"),n("strong",[t._v("至于哪一个效率高是要看情况的，因为in是在内存中比较的，而exists则是进行数据库查询操作的")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);